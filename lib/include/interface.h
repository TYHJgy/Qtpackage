// intrface.h
//
// Generated by C DriverWizard 3.2.0 (Build 2485)
// Requires DDK Only
// File created on 12/22/2016
//
// Modify history
// =============================================================================
// hyjia - 10-10-2013
//
//
#ifndef INTERFACE_H__
#define INTERFACE_H__

#ifdef __cplusplus
extern "C" {
#endif

#if (!defined(_WIN32) && !defined(_WIN64) && !defined(_AMD64_))
#error not defination platform
#endif

#include <initguid.h>


// Define an Interface Guid for PciGeneral device class.
// This GUID is used to register (IoRegisterDeviceInterface)
// an instance of an interface so that user application
// can control the PciGeneral device.
//

//------------------------------------------------vc8 to vc6
// {9445F646-6FA5-433B-97C2-4AA900E493A0}
// static const GUID GUID_DEVINTERFACE_PCI_GENERAL =
//{ 0x9445f646, 0x6fa5, 0x433b, { 0x97, 0xc2, 0x4a, 0xa9, 0x0, 0xe4, 0x93, 0xa0 } };

DEFINE_GUID(GUID_DEVINTERFACE_PCI_GENERAL, 0x9445f646, 0x6fa5, 0x433b, 0x97, 0xc2, 0x4a, 0xa9, 0x00, 0xe4, 0x93, 0xa0);

#define DEVICE_REG_BAR_IX (0)
// Register #Reset
#define R_DEVICE_BOARD_ID	0x0
#define R_DEVICE_RESET      0x4UL
#define R_DEVICE_RESET_VALUE 0xFFFFFFFFUL

// Register #Interrupt
#define R_INTERRUPT_MASK_VALUE 0xFFFFFFFFUL
#define R_INTERRUPT_STAT 0x8UL
#define R_INTERRUPT_MASK 0xCUL
//#define R_INTERRUPT_CLEAR     R_INTERRUPT_STAT

#define NODE_REG_BAR_IX (2)
#define MAX_NODE_NUMBER (4)
#define R_NODE_INTERRUPT_MASK_VALUE (0xFFFFFFFFUL)
#define R_NODE_INTERRUPT_MASK 0x4UL
#define R_NODE_INTERRUPT_STAT 0x8UL
#define R_NODE_INTERRUPT_CLEAR R_NODE_INTERRUPT_STAT

#define MAX_STRING_LENGTH	1024
#define DEFAULT_DMA_SIZE    0x200000

// Common defines (Little endian)________________________________________________________________

#ifndef PHYSICAL_ADDRESS
#define PHYSICAL_ADDRESS LARGE_INTEGER
#endif

#ifdef _DDK_DRIVER_
#define DEVICE_INFO_DIRECTION   "\\SystemRoot"
// pci_id, brd_id, slot, addr, interface name
#define DEVICE_INFO_FORMAT L"%X,%X,%X,%X,%wZ"
#define DEVICE_DMASZ_FORMAT L"%X,%X,%X,%X,%X,%X"
#else
#define DEVICE_INFO_DIRECTION   CSIDL_WINDOWS
// pci_id, brd_id, slot, addr, interface name
#define DEVICE_INFO_FORMAT L"%X,%X,%X,%X,%S"
#define DEVICE_DMASZ_FORMAT L"%X,%X,%X,%X,%X,%X"
#endif
#define DEVICE_INFO_FILENAME    "\\ZDHKDEVINFO.CSV"

// id, node dma size
#define DEVICE_DMASZ_FILENAME   "\\ZDHKDEVDMASZ.INI"


typedef struct _ZDHK_DeviceInfo {
    volatile ULONG no;
    volatile ULONG pci_id;
    volatile ULONG brd_id;
    volatile ULONG addr;
    volatile ULONG slot;
    volatile ULONG rsvd;
} ZDHK_DeviceInfo, *PZDHK_DeviceInfo;

enum _PCI_MEMORY_CHANNEL {
    PCI_MEMORY_0 = 0,
    PCI_MEMORY_1,
    PCI_MEMORY_2,
    PCI_MEMORY_3,
    PCI_MEMORY_4,
    PCI_MEMORY_5,
    PCI_MEMORY_MAX = 6,
};

#define MAX_INT_QUEUE_DEPTH 4

#define ALLOCATE_DMA_MAX_NUM 64

typedef struct _SHARE_INFO_INT {
    volatile ULONG rsvd[2];
    volatile ULONG WrPos;
    volatile ULONG RdPos;
    volatile ULONG IntStatusQueue[MAX_INT_QUEUE_DEPTH];
} SHARE_INFO_INT, *PSHARE_INFO_INT;

#if (defined(_WIN64) || defined(_AMD64))
typedef struct _SHARE_INFORMATION {
    SHARE_INFO_INT DevInt;
    ULONG rsvd[8];
    SHARE_INFO_INT NodeInt[MAX_NODE_NUMBER];
    PHYSICAL_ADDRESS DmaPhysAddr[MAX_NODE_NUMBER];
    struct {
        volatile PVOID val;
    } DmaUserAddr[MAX_NODE_NUMBER];
    struct {
        volatile ULONG_PTR val;
    } DmaSize[MAX_NODE_NUMBER];
    struct {
        volatile PVOID val;
    } BarUserAddr[PCI_MEMORY_MAX];
    struct {
        volatile ULONG_PTR val;
    } BarSize[PCI_MEMORY_MAX];
    ZDHK_DeviceInfo info;
} SHARE_INFORMATION, *PSHARE_INFORMATION;

typedef struct _DMAAllocater {
    ULONG index;
    ULONG isAlloc;
    ULONG size;
    ULONG rsvdSize;

    struct {
        PVOID val;
    } userAddr;
    PHYSICAL_ADDRESS physAddr;
    struct {
        PVOID val;
    } virtAddr;
    struct {
        PVOID val;
    } pMdl;
    struct {
        struct _DMAAllocater *val;
    } prev;
    struct {
        struct _DMAAllocater *val;
    } next;
} DMAAllocater, *PDMAAllocater;
#elif defined(_WIN32)
typedef struct _SHARE_INFORMATION {
    SHARE_INFO_INT DevInt;
    ULONG rsvd[8];
    SHARE_INFO_INT NodeInt[MAX_NODE_NUMBER];
    PHYSICAL_ADDRESS DmaPhysAddr[MAX_NODE_NUMBER];
    struct {
        volatile PVOID val;
        ULONG rsvd;
    } DmaUserAddr[MAX_NODE_NUMBER];
    struct {
        volatile ULONG_PTR val;
        ULONG rsvd;
    } DmaSize[MAX_NODE_NUMBER];
    struct {
        volatile PVOID val;
        ULONG rsvd;
    } BarUserAddr[PCI_MEMORY_MAX];
    struct {
        volatile ULONG_PTR val;
        ULONG rsvd;
    } BarSize[PCI_MEMORY_MAX];
    ZDHK_DeviceInfo info;
} SHARE_INFORMATION, *PSHARE_INFORMATION;

typedef struct _DMAAllocater {
    ULONG index;
    ULONG isAlloc;
    ULONG size;
    ULONG rsvdSize;

    struct {
        PVOID val;
        ULONG rsvd;
    } userAddr;
    PHYSICAL_ADDRESS physAddr;
    struct {
        PVOID val;
        ULONG rsvd;
    } virtAddr;
    struct {
        PVOID val;
        ULONG rsvd;
    } pMdl;
    struct {
        struct _DMAAllocater *val;
        ULONG rsvd;
    } prev;
    struct {
        struct _DMAAllocater *val;
        ULONG rsvd;
    } next;
} DMAAllocater, *PDMAAllocater;
#else
#error DMAAllocater platform undefine
#endif

#define NODE_REG_BAR_NUM (PCI_MEMORY_2)
#define NODE_REG_BAR_OFFS (0x000000)  // 0 MB
#define NODE_REG_BAR_STEP (0x200000)  // 2 MB

// IO control code
#define FILE_DEVICE_PCI_GENERAL 0x8000

// Define Interface reference/dereference routines for
// Interfaces exported by IRP_MN_QUERY_INTERFACE

#define PCI_GENERAL_IOCTL(index) CTL_CODE(FILE_DEVICE_PCI_GENERAL, index, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_DEFAULT CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)

/* IOCTL_INIT_DEVICE_INFORMATION
Input - 0
Output - 64:    Memory0..5 address(24)
                Memory0..5 size(24)
                Common buffer win32 address(4)
                Common buffer size(4)
                Common buffer logic/physical address(4)
                PCI physical slot number(4)
//*/
#define IOCTL_INIT_DEVICE_INFORMATION \
    (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

/* IOCTL_BAR_RW
Input - 12/Read register:   channel(4)
                            offset(4)
                            dword_count(4)
Output - length/Read register:    data(length)

Input2 - 12 + length2/Write register: channel2(4)
                                      offset2(4)
                                      dword_count2(4)
                                      data(length2)
Output2 - 0/Write register

Note/channel=    0..5 - Memory, 6 - CommonBuffer
//*/
#define IOCTL_BAR_RW (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)

/* IOCTL_SET_EVENT
Input - 8:    Event
//*/
#define IOCTL_SET_SEMAPHORE (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_DMA_NEW (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_DMA_DEL (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define _FUNCTION_FROM_CTL_CODE(ctrlCode) (((DWORD)((ctrlCode)&0x00003ffC)) >> 2)
#define X_FROM_FUNCTION(ctrlCode) (_FUNCTION_FROM_CTL_CODE(ctrlCode) & 0xF)

/* IOCTL_SET_NODE_EVENT
Input - 8:    Event
//*/
#define IOCTL_SET_NODE_SEMAPHORE(X) \
    (DWORD) CTL_CODE(FILE_DEVICE_PCI_GENERAL, 0x810 + (X), METHOD_BUFFERED, FILE_ANY_ACCESS)

#ifdef __cplusplus
}
#endif

#endif  // __INTRFACE_H__
